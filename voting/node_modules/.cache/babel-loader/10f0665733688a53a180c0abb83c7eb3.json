{"ast":null,"code":"var _jsxFileName = \"/home/sajal/Desktop/election/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport electionabi from './contracts/election.json';\nimport Web3 from 'web3';\nimport Navbar from './Navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchaindata();\n  }, []);\n  const [Currentaccount, setCurrentaccount] = useState(\"\");\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\"not present\");\n    }\n  };\n\n  const loadBlockchaindata = async () => {\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    const account = accounts[0];\n    setCurrentaccount(account);\n    const networkId = await web3.eth.net.getId();\n    const networkData = electionabi.networks[networkId];\n\n    if (networkData) {\n      const election = new web3.eth.Contract(electionabi.abi, networkData.address);\n      console.log(election);\n    } else {\n      window.alert(\"contract is not present here\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Navbar, {\n      account: Currentaccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"jXurvZ14Vq7HzZdhBASa273rX5I=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/sajal/Desktop/election/client/src/App.js"],"names":["React","useEffect","useState","electionabi","Web3","Navbar","App","loadWeb3","loadBlockchaindata","Currentaccount","setCurrentaccount","window","ethereum","web3","enable","currentProvider","alert","accounts","eth","getAccounts","account","networkId","net","getId","networkData","networks","election","Contract","abi","address","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,QAAwC,OAAxC;;AAEA,OAAO,WAAP;AACA,OAAOC,WAAP,MAAyB,2BAAzB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAIA,SAASC,GAAT,GAAe;AAAA;;AAEbL,EAAAA,SAAS,CAAC,MAAK;AACbM,IAAAA,QAAQ;AACRC,IAAAA,kBAAkB;AACnB,GAHQ,EAGP,EAHO,CAAT;AAIF,QAAK,CAACC,cAAD,EAAgBC,iBAAhB,IAAmCR,QAAQ,CAAC,EAAD,CAAhD;;AACE,QAAMK,QAAQ,GAAG,YAAU;AACzB,QAAGI,MAAM,CAACC,QAAV,EAAmB;AACjBD,MAAAA,MAAM,CAACE,IAAP,GAAc,IAAIT,IAAJ,CAASO,MAAM,CAACC,QAAhB,CAAd;AACA,YAAMD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAAN;AACD,KAHD,MAIG,IAAGH,MAAM,CAACE,IAAV,EACF;AACEF,MAAAA,MAAM,CAACE,IAAP,GAAY,IAAIT,IAAJ,CAASO,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAZ;AAED,KAJC,MAMF;AACEJ,MAAAA,MAAM,CAACK,KAAP,CAAa,aAAb;AACD;AAEH,GAfD;;AAgBA,QAAMR,kBAAkB,GAAG,YAAU;AACnC,UAAMK,IAAI,GAAGF,MAAM,CAACE,IAApB;AACA,UAAMI,QAAQ,GAAE,MAAMJ,IAAI,CAACK,GAAL,CAASC,WAAT,EAAtB;AACA,UAAMC,OAAO,GAAGH,QAAQ,CAAC,CAAD,CAAxB;AACAP,IAAAA,iBAAiB,CAACU,OAAD,CAAjB;AACA,UAAMC,SAAS,GAAE,MAAMR,IAAI,CAACK,GAAL,CAASI,GAAT,CAAaC,KAAb,EAAvB;AACA,UAAMC,WAAW,GAAErB,WAAW,CAACsB,QAAZ,CAAqBJ,SAArB,CAAnB;;AACA,QAAGG,WAAH,EACA;AACE,YAAME,QAAQ,GAAC,IAAIb,IAAI,CAACK,GAAL,CAASS,QAAb,CAAsBxB,WAAW,CAACyB,GAAlC,EAAsCJ,WAAW,CAACK,OAAlD,CAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACD,KAJD,MAKI;AACFf,MAAAA,MAAM,CAACK,KAAP,CAAa,8BAAb;AACD;AAEF,GAhBD;;AAmBA,sBACE;AAAA,2BACC,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEP;AAAjB;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA/CQH,G;;KAAAA,G;AAiDT,eAAeA,GAAf","sourcesContent":["import React ,{useEffect,useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport electionabi  from './contracts/election.json';\nimport Web3 from 'web3'\nimport Navbar from './Navbar';\n\n\n\nfunction App() {\n\n  useEffect(()=> {\n    loadWeb3();\n    loadBlockchaindata();\n  },[]);\nconst[Currentaccount,setCurrentaccount]=useState(\"\");\n  const loadWeb3 = async ()=>{\n    if(window.ethereum){\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    }\n  else if(window.web3)\n     {\n       window.web3=new Web3(window.web3.currentProvider);\n       \n     }\n    else\n     {\n       window.alert(\"not present\");\n     }\n\n  }\n  const loadBlockchaindata = async ()=>{\n    const web3 = window.web3;\n    const accounts= await web3.eth.getAccounts();\n    const account = accounts[0];\n    setCurrentaccount(account);\n    const networkId= await web3.eth.net.getId();\n    const networkData= electionabi.networks[networkId];\n    if(networkData)\n    {\n      const election=new web3.eth.Contract(electionabi.abi,networkData.address);\n      console.log(election);\n    }\n    else{\n      window.alert(\"contract is not present here\");\n    }\n  \n  }\n\n\n  return (\n    <div>\n     <Navbar account={Currentaccount}/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}